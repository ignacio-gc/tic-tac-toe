{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/nacho/prog/next/tic-tac-toe/components/rust.js\";\nimport dynamic from \"next/dynamic\";\nimport { useState, createRef } from 'react';\nconst Rust = dynamic({\n  loader: async () => {\n    const rust = await import('../pkg');\n    return props => {\n      const {\n        0: board,\n        1: setBoard\n      } = useState(rust.initial_state());\n      const input = /*#__PURE__*/createRef();\n      const solve = rust.solve(board);\n\n      const handleSubmit = event => {\n        event.preventDefault();\n        const board = input.split(' ');\n        alert(\"mejor movimieto: \" + rust.solve(board));\n      };\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [\"Board:\", /*#__PURE__*/_jsxDEV(\"label\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              ref: input\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: solve\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true);\n    };\n  },\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../pkg')],\n    modules: ['../pkg']\n  }\n});\nexport default Rust;","map":{"version":3,"sources":["/home/nacho/prog/next/tic-tac-toe/components/rust.js"],"names":["dynamic","useState","createRef","Rust","loader","rust","props","board","setBoard","initial_state","input","solve","handleSubmit","event","preventDefault","split","alert"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,MAAMC,IAAI,GAAGH,OAAO,CAAC;AACnBI,EAAAA,MAAM,EAAE,YAAY;AAClB,UAAMC,IAAI,GAAG,MAAM,OAAO,QAAP,CAAnB;AAEA,WACGC,KAAD,IAAW;AACT,YAAM;AAAA,WAACC,KAAD;AAAA,WAAQC;AAAR,UAAoBP,QAAQ,CAACI,IAAI,CAACI,aAAL,EAAD,CAAlC;AAEA,YAAMC,KAAK,gBAAGR,SAAS,EAAvB;AACA,YAAMS,KAAK,GAAGN,IAAI,CAACM,KAAL,CAAWJ,KAAX,CAAd;;AAEA,YAAMK,YAAY,GAAIC,KAAD,IAAW;AAC9BA,QAAAA,KAAK,CAACC,cAAN;AACA,cAAMP,KAAK,GAAGG,KAAK,CAACK,KAAN,CAAY,GAAZ,CAAd;AACAC,QAAAA,KAAK,CAAC,sBAAsBX,IAAI,CAACM,KAAL,CAAWJ,KAAX,CAAvB,CAAL;AACD,OAJD;;AAMA,0BACE;AAAA,gCACE;AAAM,UAAA,QAAQ,EAAEK,YAAhB;AAAA,4CAEE;AAAA,mCACE;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,GAAG,EAAEF;AAFP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF,eAQE;AAAO,YAAA,IAAI,EAAC,QAAZ;AAAqB,YAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE;AAAA,oBAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA,sBADF;AAeD,KA5BH;AA6BD,GAjCkB;AAAA;AAAA,wCAES,QAFT;AAAA,cAES,QAFT;AAAA;AAAA,CAAD,CAApB;AAoCA,eAAeR,IAAf","sourcesContent":["import dynamic from \"next/dynamic\"\nimport { useState, createRef } from 'react'\n\nconst Rust = dynamic({\n  loader: async () => {\n    const rust = await import('../pkg')\n\n    return (\n      (props) => {\n        const [board, setBoard] = useState(rust.initial_state())\n\n        const input = createRef()\n        const solve = rust.solve(board)\n\n        const handleSubmit = (event) => {\n          event.preventDefault()\n          const board = input.split(' ')\n          alert(\"mejor movimieto: \" + rust.solve(board))\n        }\n\n        return (\n          <>\n            <form onSubmit={handleSubmit}>\n              Board:\n              <label>\n                <input\n                  type=\"text\"\n                  ref={input}\n                />\n              </label>\n              <input type=\"submit\" value=\"Submit\" />\n            </form>\n            <div>{solve}</div>\n          </>\n        )\n      })\n  },\n})\n\nexport default Rust"]},"metadata":{},"sourceType":"module"}