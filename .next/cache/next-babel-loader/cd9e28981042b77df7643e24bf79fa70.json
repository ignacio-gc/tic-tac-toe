{"ast":null,"code":"import * as wasm from './tic_tac_toe_bg.wasm';\nlet cachegetUint32Memory0 = null;\n\nfunction getUint32Memory0() {\n  if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray32ToWasm0(arg, malloc) {\n  const ptr = malloc(arg.length * 4);\n  getUint32Memory0().set(arg, ptr / 4);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory0;\n}\n/**\n* @param {Uint32Array} board\n* @returns {number | undefined}\n*/\n\n\nexport function best(board) {\n  try {\n    const retptr = wasm.__wbindgen_export_0.value - 16;\n    wasm.__wbindgen_export_0.value = retptr;\n    var ptr0 = passArray32ToWasm0(board, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.best(retptr, ptr0, len0);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n  } finally {\n    wasm.__wbindgen_export_0.value += 16;\n  }\n}","map":{"version":3,"sources":["/home/nacho/prog/next/tic-tac-toe/pkg/tic_tac_toe_bg.js"],"names":["wasm","cachegetUint32Memory0","getUint32Memory0","buffer","memory","Uint32Array","WASM_VECTOR_LEN","passArray32ToWasm0","arg","malloc","ptr","length","set","cachegetInt32Memory0","getInt32Memory0","Int32Array","best","board","retptr","__wbindgen_export_0","value","ptr0","__wbindgen_malloc","len0","r0","r1","undefined"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,uBAAtB;AAEA,IAAIC,qBAAqB,GAAG,IAA5B;;AACA,SAASC,gBAAT,GAA4B;AACxB,MAAID,qBAAqB,KAAK,IAA1B,IAAkCA,qBAAqB,CAACE,MAAtB,KAAiCH,IAAI,CAACI,MAAL,CAAYD,MAAnF,EAA2F;AACvFF,IAAAA,qBAAqB,GAAG,IAAII,WAAJ,CAAgBL,IAAI,CAACI,MAAL,CAAYD,MAA5B,CAAxB;AACH;;AACD,SAAOF,qBAAP;AACH;;AAED,IAAIK,eAAe,GAAG,CAAtB;;AAEA,SAASC,kBAAT,CAA4BC,GAA5B,EAAiCC,MAAjC,EAAyC;AACrC,QAAMC,GAAG,GAAGD,MAAM,CAACD,GAAG,CAACG,MAAJ,GAAa,CAAd,CAAlB;AACAT,EAAAA,gBAAgB,GAAGU,GAAnB,CAAuBJ,GAAvB,EAA4BE,GAAG,GAAG,CAAlC;AACAJ,EAAAA,eAAe,GAAGE,GAAG,CAACG,MAAtB;AACA,SAAOD,GAAP;AACH;;AAED,IAAIG,oBAAoB,GAAG,IAA3B;;AACA,SAASC,eAAT,GAA2B;AACvB,MAAID,oBAAoB,KAAK,IAAzB,IAAiCA,oBAAoB,CAACV,MAArB,KAAgCH,IAAI,CAACI,MAAL,CAAYD,MAAjF,EAAyF;AACrFU,IAAAA,oBAAoB,GAAG,IAAIE,UAAJ,CAAef,IAAI,CAACI,MAAL,CAAYD,MAA3B,CAAvB;AACH;;AACD,SAAOU,oBAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,OAAO,SAASG,IAAT,CAAcC,KAAd,EAAqB;AACxB,MAAI;AACA,UAAMC,MAAM,GAAGlB,IAAI,CAACmB,mBAAL,CAAyBC,KAAzB,GAAiC,EAAhD;AACApB,IAAAA,IAAI,CAACmB,mBAAL,CAAyBC,KAAzB,GAAiCF,MAAjC;AACA,QAAIG,IAAI,GAAGd,kBAAkB,CAACU,KAAD,EAAQjB,IAAI,CAACsB,iBAAb,CAA7B;AACA,QAAIC,IAAI,GAAGjB,eAAX;AACAN,IAAAA,IAAI,CAACgB,IAAL,CAAUE,MAAV,EAAkBG,IAAlB,EAAwBE,IAAxB;AACA,QAAIC,EAAE,GAAGV,eAAe,GAAGI,MAAM,GAAG,CAAT,GAAa,CAAhB,CAAxB;AACA,QAAIO,EAAE,GAAGX,eAAe,GAAGI,MAAM,GAAG,CAAT,GAAa,CAAhB,CAAxB;AACA,WAAOM,EAAE,KAAK,CAAP,GAAWE,SAAX,GAAuBD,EAAE,KAAK,CAArC;AACH,GATD,SASU;AACNzB,IAAAA,IAAI,CAACmB,mBAAL,CAAyBC,KAAzB,IAAkC,EAAlC;AACH;AACJ","sourcesContent":["import * as wasm from './tic_tac_toe_bg.wasm';\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n/**\n* @param {Uint32Array} board\n* @returns {number | undefined}\n*/\nexport function best(board) {\n    try {\n        const retptr = wasm.__wbindgen_export_0.value - 16;\n        wasm.__wbindgen_export_0.value = retptr;\n        var ptr0 = passArray32ToWasm0(board, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.best(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n    } finally {\n        wasm.__wbindgen_export_0.value += 16;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}