{"ast":null,"code":"import * as wasm from './tic_tac_toe_bg.wasm';\nvar cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory0;\n}\n\nvar cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n  return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @returns {Uint8Array}\n*/\n\n\nexport function initial_state() {\n  try {\n    var retptr = wasm.__wbindgen_export_0.value - 16;\n    wasm.__wbindgen_export_0.value = retptr;\n    wasm.initial_state(retptr);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var v0 = getArrayU8FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 1);\n\n    return v0;\n  } finally {\n    wasm.__wbindgen_export_0.value += 16;\n  }\n}\nvar cachegetUint32Memory0 = null;\n\nfunction getUint32Memory0() {\n  if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint32Memory0;\n}\n\nvar WASM_VECTOR_LEN = 0;\n\nfunction passArray32ToWasm0(arg, malloc) {\n  var ptr = malloc(arg.length * 4);\n  getUint32Memory0().set(arg, ptr / 4);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n/**\n* @param {Uint32Array} board\n* @returns {number | undefined}\n*/\n\n\nexport function call(board) {\n  try {\n    var retptr = wasm.__wbindgen_export_0.value - 16;\n    wasm.__wbindgen_export_0.value = retptr;\n    var ptr0 = passArray32ToWasm0(board, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.call(retptr, ptr0, len0);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    return r0 === 0 ? undefined : r1 >>> 0;\n  } finally {\n    wasm.__wbindgen_export_0.value += 16;\n  }\n}","map":{"version":3,"sources":["/home/nacho/prog/next/tic-tac-toe/pkg/tic_tac_toe_bg.js"],"names":["wasm","cachegetInt32Memory0","getInt32Memory0","buffer","memory","Int32Array","cachegetUint8Memory0","getUint8Memory0","Uint8Array","getArrayU8FromWasm0","ptr","len","subarray","initial_state","retptr","__wbindgen_export_0","value","r0","r1","v0","slice","__wbindgen_free","cachegetUint32Memory0","getUint32Memory0","Uint32Array","WASM_VECTOR_LEN","passArray32ToWasm0","arg","malloc","length","set","call","board","ptr0","__wbindgen_malloc","len0","undefined"],"mappings":"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","sourcesContent":["import * as wasm from './tic_tac_toe_bg.wasm';\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @returns {Uint8Array}\n*/\nexport function initial_state() {\n    try {\n        const retptr = wasm.__wbindgen_export_0.value - 16;\n        wasm.__wbindgen_export_0.value = retptr;\n        wasm.initial_state(retptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    } finally {\n        wasm.__wbindgen_export_0.value += 16;\n    }\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint32Array} board\n* @returns {number | undefined}\n*/\nexport function call(board) {\n    try {\n        const retptr = wasm.__wbindgen_export_0.value - 16;\n        wasm.__wbindgen_export_0.value = retptr;\n        var ptr0 = passArray32ToWasm0(board, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.call(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return r0 === 0 ? undefined : r1 >>> 0;\n    } finally {\n        wasm.__wbindgen_export_0.value += 16;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}