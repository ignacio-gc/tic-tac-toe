{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/nacho/prog/next/tic-tac-toe/components/rust.js\",\n    _this = this;\n\nimport dynamic from \"next/dynamic\";\nimport { useState } from 'react';\nvar Rust = dynamic({\n  loader: function () {\n    var _loader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _s = $RefreshSig$();\n\n      var rust;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return import('../pkg');\n\n            case 2:\n              rust = _context.sent;\n              return _context.abrupt(\"return\", _s(function (props) {\n                _s();\n\n                var _useState = useState(rust.initial_state()),\n                    board = _useState[0],\n                    setBoard = _useState[1];\n\n                return /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [/*#__PURE__*/_jsxDEV(\"form\", {\n                    children: [\"Board:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"text\",\n                      value: board,\n                      onChange: handleChange\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 16,\n                      columnNumber: 15\n                    }, _this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 14,\n                    columnNumber: 13\n                  }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    onChange: function onChange(event) {\n                      return setBoard(event.target.value.split(' '));\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 22,\n                    columnNumber: 13\n                  }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: rust.solve(board)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 23,\n                    columnNumber: 13\n                  }, _this)]\n                }, void 0, true);\n              }, \"Jt2X/uIlX5AUYz3S8yHjD9zi1/c=\"));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function loader() {\n      return _loader.apply(this, arguments);\n    }\n\n    return loader;\n  }(),\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('../pkg')];\n    },\n    modules: ['../pkg']\n  }\n});\nexport default Rust;","map":{"version":3,"sources":["/home/nacho/prog/next/tic-tac-toe/components/rust.js"],"names":["dynamic","useState","Rust","loader","rust","props","initial_state","board","setBoard","handleChange","event","target","value","split","solve"],"mappings":";;;;;;;;AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,IAAMC,IAAI,GAAGF,OAAO,CAAC;AACnBG,EAAAA,MAAM;AAAA,2EAAE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACa,OAAO,QAAP,CADb;;AAAA;AACAC,cAAAA,IADA;AAAA,kDAIJ,UAACC,KAAD,EAAW;AAAA;;AAAA,gCACiBJ,QAAQ,CAACG,IAAI,CAACE,aAAL,EAAD,CADzB;AAAA,oBACFC,KADE;AAAA,oBACKC,QADL;;AAGT,oCACE;AAAA,0CACE;AAAA,sDAEE;AACE,sBAAA,IAAI,EAAC,MADP;AAEE,sBAAA,KAAK,EAAED,KAFT;AAGE,sBAAA,QAAQ,EAAEE;AAHZ;AAAA;AAAA;AAAA;AAAA,6BAFF;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eASE;AAAO,oBAAA,QAAQ,EAAE,kBAAAC,KAAK;AAAA,6BAAIF,QAAQ,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,KAAnB,CAAyB,GAAzB,CAAD,CAAZ;AAAA;AAAtB;AAAA;AAAA;AAAA;AAAA,2BATF,eAUE;AAAA,8BAAMT,IAAI,CAACU,KAAL,CAAWP,KAAX;AAAN;AAAA;AAAA;AAAA;AAAA,2BAVF;AAAA,gCADF;AAcD,eArBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KADa;AAAA;AAAA;AAAA,kCAES,QAFT;AAAA;AAAA,cAES,QAFT;AAAA;AAAA,CAAD,CAApB;AA0BA,eAAeL,IAAf","sourcesContent":["import dynamic from \"next/dynamic\"\nimport { useState } from 'react'\n\nconst Rust = dynamic({\n  loader: async () => {\n    const rust = await import('../pkg')\n\n    return (\n      (props) => {\n        const [board, setBoard] = useState(rust.initial_state())\n\n        return (\n          <>\n            <form>\n              Board:\n              <input\n                type=\"text\"\n                value={board}\n                onChange={handleChange}\n              />\n            </form>\n            <input onChange={event => setBoard(event.target.value.split(' '))} />\n            <div>{rust.solve(board)}</div>\n          </>\n        )\n      })\n  },\n})\n\nexport default Rust"]},"metadata":{},"sourceType":"module"}