{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/nacho/prog/next/tic-tac-toe/components/about.js\";\nimport styles from './about.module.css';\nimport { useEffect } from 'react';\nimport Prism from 'prismjs';\n\nconst About = () => {\n  useEffect(() => {\n    Prism.highlightAll();\n  }, []);\n  const minimaxCode = `\n   //  Returns the optimal action for the current player on the board.\n   fn minimax(game: &Game) -> Option<usize> {\n    if terminal(game) {\n        return None;\n    }\n\n    let mut best_action: usize = 2;\n\n    match player(game) {\n        Square::X => {\n            let mut max_v = i64::MIN;\n            for action in actions(game) {\n                let next_board = result(game, action).unwrap();\n                if winner(&next_board) == Some(Square::X) {\n                    return Some(action);\n                }\n                let v = min_val(&next_board, i64::MIN, i64::MAX);\n                if v > max_v {\n                    best_action = action;\n                    max_v = v;\n                }\n            }\n        }\n        Square::O => {\n            let mut min_v = i64::MAX;\n            for action in actions(game) {\n                let next_board = result(game, action).unwrap();\n                if winner(&next_board) == Some(Square::O) {\n                    return Some(action);\n                }\n                let v = max_val(&next_board, i64::MIN, i64::MAX);\n                if v < min_v {\n                    best_action = action;\n                    min_v = v;\n                }\n            }\n        }\n        Square::Null => (),\n    }\n\n    Some(best_action)\n}\n\n// Returns the max value \"v\"\nfn max_val(game: &Game, mut alpha: i64, beta: i64) -> i64 {\n    if terminal(&game) {\n        return utility(&game);\n    }\n    let mut v = i64::MIN;\n    for action in actions(game) {\n        v = v.max(min_val(&result(game, action).unwrap(), alpha, beta));\n        alpha = v.max(alpha);\n        if alpha >= beta {\n            break;\n        }\n    }\n\n    v\n}\n\n// Returns the min value \"v\"\nfn min_val(game: &Game, alpha: i64, mut beta: i64) -> i64 {\n    if terminal(&game) {\n        return utility(&game);\n    }\n    let mut v = i64::MAX;\n    for action in actions(game) {\n        v = v.min(max_val(&result(&game, action).unwrap(), alpha, beta));\n        beta = v.min(beta);\n        if alpha >= beta {\n            break;\n        }\n    }\n\n    v\n}\n  `;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.text,\n      children: [\"Las respuestas autom\\xE1ticas en el TA-TE-TI de arriba est\\xE1n generadas en base al algor\\xEDtmo \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://es.wikipedia.org/wiki/Minimax\",\n        target: \"_\",\n        children: \"minimax\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 98\n      }, this), \". Como dice Wikipedia \\\"minimax es un m\\xE9todo de decisi\\xF3n para minimizar la p\\xE9rdida m\\xE1xima esperada en juegos con adversario y con informaci\\xF3n perfecta\\\".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.text,\n      children: \"La implementaci\\xF3n est\\xE1 hecha en Rust y compilado a Webassembly con wasm-pack. La p\\xE1gina web est\\xE1 hecha en Next.js.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.text,\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: styles.codeBlock,\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          className: \"language-rust\",\n          children: minimaxCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default About;","map":{"version":3,"sources":["/home/nacho/prog/next/tic-tac-toe/components/about.js"],"names":["styles","useEffect","Prism","About","highlightAll","minimaxCode","text","codeBlock"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAElBF,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CAACE,YAAN;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMC,WAAW,GAChB;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA9EE;AAgFA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEL,MAAM,CAACM,IAAvB;AAAA,oIAC2F;AAAG,QAAA,IAAI,EAAC,uCAAR;AAAgD,QAAA,MAAM,EAAC,GAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD3F;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAK,MAAA,SAAS,EAAEN,MAAM,CAACM,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAQE;AAAK,MAAA,SAAS,EAAEN,MAAM,CAACM,IAAvB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAEN,MAAM,CAACO,SAAvB;AAAA,+BAAkC;AAAM,UAAA,SAAS,EAAE,eAAjB;AAAA,oBAAmCF;AAAnC;AAAA;AAAA;AAAA;AAAA;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAcD,CApGD;;AAsGA,eAAeF,KAAf","sourcesContent":["import styles from './about.module.css'\nimport { useEffect } from 'react'\nimport Prism from 'prismjs'\n\nconst About = () => {\n\n  useEffect(() => {\n    Prism.highlightAll();\n  }, []);\n\n  const minimaxCode = \n  `\n   //  Returns the optimal action for the current player on the board.\n   fn minimax(game: &Game) -> Option<usize> {\n    if terminal(game) {\n        return None;\n    }\n\n    let mut best_action: usize = 2;\n\n    match player(game) {\n        Square::X => {\n            let mut max_v = i64::MIN;\n            for action in actions(game) {\n                let next_board = result(game, action).unwrap();\n                if winner(&next_board) == Some(Square::X) {\n                    return Some(action);\n                }\n                let v = min_val(&next_board, i64::MIN, i64::MAX);\n                if v > max_v {\n                    best_action = action;\n                    max_v = v;\n                }\n            }\n        }\n        Square::O => {\n            let mut min_v = i64::MAX;\n            for action in actions(game) {\n                let next_board = result(game, action).unwrap();\n                if winner(&next_board) == Some(Square::O) {\n                    return Some(action);\n                }\n                let v = max_val(&next_board, i64::MIN, i64::MAX);\n                if v < min_v {\n                    best_action = action;\n                    min_v = v;\n                }\n            }\n        }\n        Square::Null => (),\n    }\n\n    Some(best_action)\n}\n\n// Returns the max value \"v\"\nfn max_val(game: &Game, mut alpha: i64, beta: i64) -> i64 {\n    if terminal(&game) {\n        return utility(&game);\n    }\n    let mut v = i64::MIN;\n    for action in actions(game) {\n        v = v.max(min_val(&result(game, action).unwrap(), alpha, beta));\n        alpha = v.max(alpha);\n        if alpha >= beta {\n            break;\n        }\n    }\n\n    v\n}\n\n// Returns the min value \"v\"\nfn min_val(game: &Game, alpha: i64, mut beta: i64) -> i64 {\n    if terminal(&game) {\n        return utility(&game);\n    }\n    let mut v = i64::MAX;\n    for action in actions(game) {\n        v = v.min(max_val(&result(&game, action).unwrap(), alpha, beta));\n        beta = v.min(beta);\n        if alpha >= beta {\n            break;\n        }\n    }\n\n    v\n}\n  `\n\n  return (\n    <>\n      <div className={styles.text}>\n        Las respuestas automáticas en el TA-TE-TI de arriba están generadas en base al algorítmo <a href=\"https://es.wikipedia.org/wiki/Minimax\" target=\"_\">minimax</a>.\n        Como dice Wikipedia \"minimax es un método de decisión para minimizar la pérdida máxima esperada en juegos con adversario y con información perfecta\".\n      </div>\n      <div className={styles.text}>\n        La implementación está hecha en Rust y compilado a Webassembly con wasm-pack. La página web está hecha en Next.js.\n      </div>\n      <div className={styles.text}>\n        <pre className={styles.codeBlock}><code className={\"language-rust\"}>{minimaxCode}</code></pre>\n      </div>\n    </>\n  )\n}\n\nexport default About"]},"metadata":{},"sourceType":"module"}