{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/nacho/prog/next/tic-tac-toe/components/rust.js\";\nimport dynamic from \"next/dynamic\";\nimport { useState } from 'react';\nconst Rust = dynamic({\n  loader: async () => {\n    const rust = await import('../pkg');\n    return props => {\n      rust.init_panic_hook;\n\n      const handleSubmit = event => {\n        event.preventDefault();\n        const b = event.target.elements.board.value.split(' ');\n        const s = rust.solve(b);\n        alert(\"mejor movimieto: \" + s + ' ' + \" Es array?: \" + Array.isArray(b));\n        event.target.reset();\n      };\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"board\",\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }, this)\n      }, void 0, false);\n    };\n  },\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../pkg')],\n    modules: ['../pkg']\n  }\n});\nexport default Rust;","map":{"version":3,"sources":["/home/nacho/prog/next/tic-tac-toe/components/rust.js"],"names":["dynamic","useState","Rust","loader","rust","props","init_panic_hook","handleSubmit","event","preventDefault","b","target","elements","board","value","split","s","solve","alert","Array","isArray","reset"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,MAAMC,IAAI,GAAGF,OAAO,CAAC;AACnBG,EAAAA,MAAM,EAAE,YAAY;AAClB,UAAMC,IAAI,GAAG,MAAM,OAAO,QAAP,CAAnB;AAEA,WACGC,KAAD,IAAW;AACTD,MAAAA,IAAI,CAACE,eAAL;;AAEA,YAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9BA,QAAAA,KAAK,CAACC,cAAN;AACA,cAAMC,CAAC,GAAGF,KAAK,CAACG,MAAN,CAAaC,QAAb,CAAsBC,KAAtB,CAA4BC,KAA5B,CAAkCC,KAAlC,CAAwC,GAAxC,CAAV;AACA,cAAMC,CAAC,GAAGZ,IAAI,CAACa,KAAL,CAAWP,CAAX,CAAV;AACAQ,QAAAA,KAAK,CAAC,sBAAsBF,CAAtB,GAA0B,GAA1B,GAAgC,cAAhC,GAAiDG,KAAK,CAACC,OAAN,CAAcV,CAAd,CAAlD,CAAL;AACAF,QAAAA,KAAK,CAACG,MAAN,CAAaU,KAAb;AACD,OAND;;AAQA,0BACE;AAAA,+BACE;AAAM,UAAA,QAAQ,EAAEd,YAAhB;AAAA,iCACE;AAAO,YAAA,IAAI,EAAC,OAAZ;AAAoB,YAAA,IAAI,EAAC;AAAzB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,uBADF;AAOD,KAnBH;AAoBD,GAxBkB;AAAA;AAAA,wCAES,QAFT;AAAA,cAES,QAFT;AAAA;AAAA,CAAD,CAApB;AA2BA,eAAeL,IAAf","sourcesContent":["import dynamic from \"next/dynamic\"\nimport { useState } from 'react'\n\nconst Rust = dynamic({\n  loader: async () => {\n    const rust = await import('../pkg')\n\n    return (\n      (props) => {\n        rust.init_panic_hook\n\n        const handleSubmit = (event) => {\n          event.preventDefault()\n          const b = event.target.elements.board.value.split(' ')\n          const s = rust.solve(b)\n          alert(\"mejor movimieto: \" + s + ' ' + \" Es array?: \" + Array.isArray(b))\n          event.target.reset();\n        }\n\n        return (\n          <>\n            <form onSubmit={handleSubmit}>\n              <input name=\"board\" type=\"text\" />\n            </form>\n          </>\n        )\n      })\n  },\n})\n\nexport default Rust"]},"metadata":{},"sourceType":"module"}