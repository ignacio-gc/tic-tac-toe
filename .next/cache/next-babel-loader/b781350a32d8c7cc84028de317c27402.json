{"ast":null,"code":"import * as wasm from './tic_tac_toe_bg.wasm';\nlet cachegetUint32Memory0 = null;\n\nfunction getUint32Memory0() {\n  if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray32ToWasm0(arg, malloc) {\n  const ptr = malloc(arg.length * 4);\n  getUint32Memory0().set(arg, ptr / 4);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n/**\n* @param {Uint32Array} board\n* @returns {number}\n*/\n\n\nexport function best(board) {\n  var ptr0 = passArray32ToWasm0(board, wasm.__wbindgen_malloc);\n  var len0 = WASM_VECTOR_LEN;\n  var ret = wasm.best(ptr0, len0);\n  return ret >>> 0;\n}","map":{"version":3,"sources":["/home/nacho/prog/next/tic-tac-toe/pkg/tic_tac_toe_bg.js"],"names":["wasm","cachegetUint32Memory0","getUint32Memory0","buffer","memory","Uint32Array","WASM_VECTOR_LEN","passArray32ToWasm0","arg","malloc","ptr","length","set","best","board","ptr0","__wbindgen_malloc","len0","ret"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,uBAAtB;AAEA,IAAIC,qBAAqB,GAAG,IAA5B;;AACA,SAASC,gBAAT,GAA4B;AACxB,MAAID,qBAAqB,KAAK,IAA1B,IAAkCA,qBAAqB,CAACE,MAAtB,KAAiCH,IAAI,CAACI,MAAL,CAAYD,MAAnF,EAA2F;AACvFF,IAAAA,qBAAqB,GAAG,IAAII,WAAJ,CAAgBL,IAAI,CAACI,MAAL,CAAYD,MAA5B,CAAxB;AACH;;AACD,SAAOF,qBAAP;AACH;;AAED,IAAIK,eAAe,GAAG,CAAtB;;AAEA,SAASC,kBAAT,CAA4BC,GAA5B,EAAiCC,MAAjC,EAAyC;AACrC,QAAMC,GAAG,GAAGD,MAAM,CAACD,GAAG,CAACG,MAAJ,GAAa,CAAd,CAAlB;AACAT,EAAAA,gBAAgB,GAAGU,GAAnB,CAAuBJ,GAAvB,EAA4BE,GAAG,GAAG,CAAlC;AACAJ,EAAAA,eAAe,GAAGE,GAAG,CAACG,MAAtB;AACA,SAAOD,GAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,OAAO,SAASG,IAAT,CAAcC,KAAd,EAAqB;AACxB,MAAIC,IAAI,GAAGR,kBAAkB,CAACO,KAAD,EAAQd,IAAI,CAACgB,iBAAb,CAA7B;AACA,MAAIC,IAAI,GAAGX,eAAX;AACA,MAAIY,GAAG,GAAGlB,IAAI,CAACa,IAAL,CAAUE,IAAV,EAAgBE,IAAhB,CAAV;AACA,SAAOC,GAAG,KAAK,CAAf;AACH","sourcesContent":["import * as wasm from './tic_tac_toe_bg.wasm';\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint32Array} board\n* @returns {number}\n*/\nexport function best(board) {\n    var ptr0 = passArray32ToWasm0(board, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.best(ptr0, len0);\n    return ret >>> 0;\n}\n\n"]},"metadata":{},"sourceType":"module"}